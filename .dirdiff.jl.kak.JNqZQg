#-----------------------------------------------#
#					dirdiff.jl					#
#-----------------------------------------------#
# Command line execution script for analysing	#
# the differences in directory contents, used	#
# mainly to compare SD card versions whic	#
# contain `.bmp` and config files.				#
#						~						#
#				Pierre Steen 2021				#
#===============================================#

## Packages

using CSV
using FileIO
using DataFrames
using ImageMagick
using Images
using ImageIO
using ArgParse
using OutputCollectors

## Custom Type Definitions

"""
	Differences{T<:AbstractDict}

Type which contains
"""
struct Differences{T<:AbstractDict}
	unchanged::T
	reassigned::T
	renamed::T
	removed::T
	added::T
end

## `Differences` Type Constructor

"""
	calcdifferences(collection1, collection2)

Calculates and constructs a `::Differences` datatype instance for the input
"""
function calcdifferences(collection1, collection2)::Differences
	return Differences(
		unchangedpairs(collection1, collection2),
		reassignedpairs(collection1, collection2),
		renamedpairs(collection1, collection2),
		diffpairs(collection1, collection2),	# removed (v51 to v54)
		diffpairs(collection2, collection1)		# added
	)
end

## ArgParse Setup

"""
	parse_commandline()

Parses and returns a dictionary of parsed command line arguments and flags.
"""
function parsecommandline()
	s = ArgParseSettings()

	@add_arg_table! s begin
		# "--bmp", "-b"
			# help = "an option with an argument"
		# "--flag1"
			# help = "an option without argument, i.e. a flag"
			# action = :store_true
		"dir1"
		# dir1 represents the old directory version passed in as a string
			help = "references directory - old version"
			arg_type = String
			required = true
		"dir2"
		# dir2 represents the new directory version passed in as a string
			help = "target directory - new version"
			arg_type = String
			required = true
	end

	return parse_args(s)
end

## Analysis

"""
	filterformat(mixed_filenames)

Split `.txt` and `.bmp` files from array of mixed string file names.
"""
function filterformat(mixed_filenames)
	bmp_filenames = []
	txt_filenames = []
	for filename in mixed_filenames
		if split(filename, ".")[2] != "txt"
			push!(bmp_filenames, filename)
		else
			push!(txt_filenames, filename)
		end
	end

	return bmp_filenames, txt_filenames
end

"""
	encodeimages(collection::Dict{String, Matrix{ColorTypes.RGB{FixedPointNumbers.N0f8}}})

Encode a dictionary of `filename::String => image::Matrix{ColorTypes.RGB{FixedPointNumbers.N0f8}}` to a dictionary of `id::Int => image::Matrix{ColorTypes.RGB{FixedPointNumbers.N0f8}}` pairs.
Ensure image entries are unique before adding to dictionary.
"""
function encodeimages(collection::T) where {T<:AbstractDict}
	# encoded = Dict{Int, Matrix{ColorTypes.RGB{FixedPointNumbers.N0f8}}}() # initialise empty dictionary
	encoded = Dict()
	count = 1
	for pair in collection
		# ensure image not already encoded for (such that allunique(values(encoded)) = true)
		if !in(pair[2], values(encoded))
			push!(encoded, count => pair[2]) # add unique image to encode dictionary
			count += 1 # only increment count if image has been added
		end
	end

	return encoded
end

"""
	unchangedpairs(collection1::T, collection2::T) where {T<:AbstractDict}

Calculates which pairs are unchanged when moving comparing `collection2` to `collection1`, where both collections are dictionaries of `(file_name => file_content)` pairs.
"""
function unchangedpairs(collection1::T, collection2::T) where {T<:AbstractDict}
	# unchanged = Dict{String, Matrix{ColorTypes.RGB{FixedPointNumbers.N0f8}}}()
	unchanged = Dict()
	for pair in collection2
		if in(pair, collection1)
			push!(unchanged, pair)
		end
	end

	return unchanged
end

"""
	reassignedpairs(collection1::T, collection2::T) where {T<:AbstractDict}
"""
function reassignedpairs(collection1::T, collection2::T) where {T<:AbstractDict}
	# reassigned = Dict{String, Matrix{ColorTypes.RGB{FixedPointNumbers.N0f8}}}()
	reassigned = Dict()
	for pair in collection2
		if in(pair[1], keys(collection1)) && !in(pair[2], values(collection1))
			push!(reassigned, pair)
		end
	end

	return reassigned
end

"""
	renamedpairs(collection1::T, collection2::T) where {T<:AbstractDict}
"""
function renamedpairs(collection1::T, collection2::T) where {T<:AbstractDict}
	# renamed = Dict{String, Matrix{ColorTypes.RGB{FixedPointNumbers.N0f8}}}()
	renamed = Dict()
	for pair in collection2
		if in(pair[2], values(collection1)) && !in(pair[1], keys(collection1))
			push!(renamed, pair)
		end
	end

	return renamed
end

"""
	diffpairs(collection1::T, collection2::T) where {T<:AbstractDict}

Works for both removed and added pairs, switch argument order to change functionality.
"""
function diffpairs(collection1::T, collection2::T) where {T<:AbstractDict}
	# removed = Dict{String, Matrix{ColorTypes.RGB{FixedPointNumbers.N0f8}}}()
	removed = Dict()
	for pair in collection1
		if !in(pair[2], values(collection2)) && !in(pair, collection2) && !in(pair[1], keys(collection2))
			push!(removed, pair)
		end
	end

	return removed
end

## Shell diff and `.csv` file build

function argstodirs(parsed_args)
	return [parsed_args["dir1"], parsed_args["dir2"]]
end

# navigate to ref and target directory then run shell command:
# ```
# find . -type f
# ```
# which will create and output stream of all the file names in the current directory.
# Do this for each directory we want to analyse, use OutputCollector to collect stdout
# and stderr IO streams.
function streamfilenames(directories)
	returnto = @__DIR__
	filenames = []
	script = """
	#!/bin/bash
	find . -type f
	"""

	for dir in directories
		cd(dir)
		oc = OutputCollector(`bash -c $script`; verbose=false)
		merge(oc)
		if isempty(collect_stderr(oc))
			push!(filenames, split(collect_stdout(oc), "\n"))
		else
			break
		end
	end
	cd(returnto)

	return filenames
end

## Main Function

function main()
	# read args then capture filenames from bash IO stream using OutputCollector
	parsed_args = parsecommandline()
	filenames = argstodirs(parsed_args) |> streamfilenames # size (2, ,) array containing dir filenames

	# next steps:
	# - split .bmp txt file
	# - construct Pair(filename => image) and Pair(filename => content) dictionaries
	# - calculate changes and construct Differences instance

    return filenames
end

@show main() # program execution

